; SMT-LIB formulae selfie-generated by ./selfie
; for manuscript/code/merge/nested-if-else.c with 300 execution depth

(set-option :produce-models true)
(set-option :incremental true)
(set-logic QF_BV)

(declare-fun r0 () (_ BitVec 8)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x1007C(~1): 
(declare-fun b1 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x101B0(~21): 
(assert (= b1 (bvcomp ((_ zero_extend 63) (bvult (_ bv42 64) ((_ zero_extend 56) r0))) (_ bv0 64)))); beq in manuscript/code/merge/nested-if-else.c: $pc=0x101B0(~21): 
(declare-fun p2 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x101B0(~21): 
(assert (= p2 true)); path condition in manuscript/code/merge/nested-if-else.c: $pc=0x101B0(~21): 
(declare-fun m3 () (_ BitVec 64)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x101C8(~22): 
(assert (= m3 (bvsub ((_ zero_extend 56) r0) (_ bv1 64)))); sd in manuscript/code/merge/nested-if-else.c: $pc=0x101C8(~22): 
(declare-fun b4 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x101DC(~24): 
(assert (= b4 (bvcomp ((_ zero_extend 63) (bvult (_ bv50 64) m3)) (_ bv0 64)))); beq in manuscript/code/merge/nested-if-else.c: $pc=0x101DC(~24): 
(declare-fun p5 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x101DC(~24): 
(assert (= p5 (and p2 (not b1)))); path condition in manuscript/code/merge/nested-if-else.c: $pc=0x101DC(~24): 
(declare-fun m6 () (_ BitVec 64)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x101F4(~25): 
(assert (= m6 (bvsub m3 (_ bv1 64)))); sd in manuscript/code/merge/nested-if-else.c: $pc=0x101F4(~25): 
; merge potentially possible at instruction: manuscript/code/merge/nested-if-else.c: $pc=0x10214(~30): 
(declare-fun b7 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(assert (= b7 (bvcomp ((_ zero_extend 63) (bvult (bvsub (_ bv50 64) m6) (_ bv1 64))) (_ bv0 64)))); beq in manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(declare-fun p8 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(assert (= p8 (and p5 (not b4)))); path condition in manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
; merge potentially possible at instruction: manuscript/code/merge/nested-if-else.c: $pc=0x10268(~36): 

(push 1)
(assert (and (and p8 (not b7)) (not (= (_ bv1 64) (_ bv0 64))))); exit in manuscript/code/merge/nested-if-else.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)

(push 1)
(assert (and (and p8 b7) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/nested-if-else.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
(declare-fun m9 () (_ BitVec 64)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x10210(~27): 
(assert (= m9 (bvadd m3 (_ bv1 64)))); sd in manuscript/code/merge/nested-if-else.c: $pc=0x10210(~27): 
; merge potentially possible at instruction: manuscript/code/merge/nested-if-else.c: $pc=0x10230(~32): 
(declare-fun b10 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(assert (= b10 (bvcomp ((_ zero_extend 63) (bvult (bvsub (_ bv50 64) m9) (_ bv1 64))) (_ bv0 64)))); beq in manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(declare-fun p11 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(assert (= p11 (and p5 b4))); path condition in manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
; merge potentially possible at instruction: manuscript/code/merge/nested-if-else.c: $pc=0x10268(~36): 

(push 1)
(assert (and (and p11 (not b10)) (not (= (_ bv1 64) (_ bv0 64))))); exit in manuscript/code/merge/nested-if-else.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)

(push 1)
(assert (and (and p11 b10) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/nested-if-else.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
(declare-fun m12 () (_ BitVec 64)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x1022C(~30): 
(assert (= m12 (bvadd ((_ zero_extend 56) r0) (_ bv10 64)))); sd in manuscript/code/merge/nested-if-else.c: $pc=0x1022C(~30): 
(declare-fun b13 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(assert (= b13 (bvcomp ((_ zero_extend 63) (bvult (bvsub (_ bv50 64) m12) (_ bv1 64))) (_ bv0 64)))); beq in manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(declare-fun p14 () (_ BitVec 1)); variable for manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
(assert (= p14 (and p2 b1))); path condition in manuscript/code/merge/nested-if-else.c: $pc=0x10248(~32): 
; merge potentially possible at instruction: manuscript/code/merge/nested-if-else.c: $pc=0x10268(~36): 

(push 1)
(assert (and (and p14 (not b13)) (not (= (_ bv1 64) (_ bv0 64))))); exit in manuscript/code/merge/nested-if-else.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)

(push 1)
(assert (and (and p14 b13) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/nested-if-else.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)

(exit)