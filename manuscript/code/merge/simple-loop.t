; SMT-LIB formulae selfie-generated by ./selfie
; for manuscript/code/merge/simple-loop.c with 300 execution depth

(set-option :produce-models true)
(set-option :incremental true)
(set-logic QF_BV)

(declare-fun r0 () (_ BitVec 8)); variable for manuscript/code/merge/simple-loop.c: $pc=0x1007C(~1): 
(declare-fun b1 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b1 (bvcomp ((_ zero_extend 63) (bvult ((_ zero_extend 56) r0) (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p2 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p2 true)); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m3 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m3 (bvadd ((_ zero_extend 56) r0) (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b4 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b4 (bvcomp ((_ zero_extend 63) (bvult m3 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p5 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p5 (and p2 (not b1)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m6 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m6 (bvadd m3 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b7 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b7 (bvcomp ((_ zero_extend 63) (bvult m6 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p8 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p8 (and p5 (not b4)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m9 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m9 (bvadd m6 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b10 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b10 (bvcomp ((_ zero_extend 63) (bvult m9 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p11 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p11 (and p8 (not b7)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m12 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m12 (bvadd m9 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b13 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b13 (bvcomp ((_ zero_extend 63) (bvult m12 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p14 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p14 (and p11 (not b10)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m15 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m15 (bvadd m12 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b16 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b16 (bvcomp ((_ zero_extend 63) (bvult m15 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p17 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p17 (and p14 (not b13)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m18 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m18 (bvadd m15 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b19 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b19 (bvcomp ((_ zero_extend 63) (bvult m18 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p20 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p20 (and p17 (not b16)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m21 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m21 (bvadd m18 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b22 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b22 (bvcomp ((_ zero_extend 63) (bvult m21 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p23 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p23 (and p20 (not b19)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m24 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m24 (bvadd m21 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b25 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b25 (bvcomp ((_ zero_extend 63) (bvult m24 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p26 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p26 (and p23 (not b22)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m27 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m27 (bvadd m24 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b28 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b28 (bvcomp ((_ zero_extend 63) (bvult m27 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p29 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p29 (and p26 (not b25)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m30 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m30 (bvadd m27 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b31 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b31 (bvcomp ((_ zero_extend 63) (bvult m30 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p32 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p32 (and p29 (not b28)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m33 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m33 (bvadd m30 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b34 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b34 (bvcomp ((_ zero_extend 63) (bvult m33 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p35 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p35 (and p32 (not b31)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m36 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m36 (bvadd m33 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b37 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b37 (bvcomp ((_ zero_extend 63) (bvult m36 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p38 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p38 (and p35 (not b34)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m39 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m39 (bvadd m36 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b40 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b40 (bvcomp ((_ zero_extend 63) (bvult m39 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p41 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p41 (and p38 (not b37)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun m42 () (_ BitVec 64)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(assert (= m42 (bvadd m39 (_ bv1 64)))); sd in manuscript/code/merge/simple-loop.c: $pc=0x101D8(~21): 
(declare-fun b43 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= b43 (bvcomp ((_ zero_extend 63) (bvult m42 (_ bv50 64))) (_ bv0 64)))); beq in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(declare-fun p44 () (_ BitVec 1)); variable for manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
(assert (= p44 (and p41 (not b40)))); path condition in manuscript/code/merge/simple-loop.c: $pc=0x101B0(~19): 
;(push 1)
;(assert (not (and p44 (not b43)))); timeout in manuscript/code/merge/simple-loop.c: $pc=0x101C0(~20): 
;(check-sat)
;(get-model)
;(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 
;(push 1)
;(assert (not (and p44 b43))); timeout in manuscript/code/merge/simple-loop.c: $pc=0x101F0(~24): 
;(check-sat)
;(get-model)
;(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 
;(push 1)
;(assert (not (and p41 b40))); timeout in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
;(check-sat)
;(get-model)
;(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p38 b37) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p35 b34) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p32 b31) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p29 b28) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p26 b25) (not (= (_ bv1 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p23 b22) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p20 b19) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p17 b16) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p14 b13) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p11 b10) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p8 b7) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)
; merge potentially possible at instruction: manuscript/code/merge/simple-loop.c: $pc=0x101E0(~24): 

(push 1)
(assert (and (and p5 b4) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)

(push 1)
(assert (and (and p2 b1) (not (= (_ bv0 64) (_ bv0 64))))); exit in manuscript/code/merge/simple-loop.c: $pc=0x1005C(~1): 
(check-sat)
(get-model)
(pop 1)

(exit)